import React, { useState, useEffect } from 'react';
import { Keyboard, View, Text, StyleSheet, TextInput, Alert, TouchableOpacity, ScrollView } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { format } from 'date-fns';

const moodEmojiMap = {
  happy: 'üòÑ',
  sad: 'üò¢',
  angry: 'üò†',
  disgust: 'ü§¢',
  fear: 'üò±',
  surprise: 'üò≤',
};

const moodLabelThaiMap = {
  happy: '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç',
  sad: '‡πÄ‡∏®‡∏£‡πâ‡∏≤',
  angry: '‡πÇ‡∏Å‡∏£‡∏ò',
  disgust: '‡∏Ç‡∏¢‡∏∞‡πÅ‡∏Ç‡∏¢‡∏á',
  fear: '‡∏Å‡∏•‡∏±‡∏ß',
  surprise: '‡∏ï‡∏Å‡πÉ‡∏à',
};

const CreateDiary = () => {
  const [selectedMoods, setSelectedMoods] = useState([]);
  const [diaryText, setDiaryText] = useState('');
  const [date, setDate] = useState(getCurrentDate());
  const [sentiment, setSentiment] = useState('');
  const [savedEntry, setSavedEntry] = useState(null);
  const [view, setView] = useState('createDiary');
  const [encouragement, setEncouragement] = useState('');

  const encouragementMessages = [
    "‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏î‡∏µ ‡πÅ‡∏ï‡πà‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô üí™",
    "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏∞‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô üß°",
    "‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏Å ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞ ‚ú®",
    "‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ú‡πà‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏Å‡πá‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß üòä",
    "‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏∂‡∏Å‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏±‡∏Å‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ üåà",
  ];

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô dd-MM-yyyy
  function getCurrentDate() {
    const d = new Date();
    const day = d.getDate().toString().padStart(2, '0');
    const month = (d.getMonth() + 1).toString().padStart(2, '0');
    const year = d.getFullYear();
    return `${day}-${month}-${year}`;
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô view ‡∏´‡∏£‡∏∑‡∏≠ date
  useEffect(() => {
    const loadSavedEntry = async () => {
      try {
        const existing = await AsyncStorage.getItem('diary_entries');
        let entries = existing ? JSON.parse(existing) : [];

        const entry = entries.find((e) => e.date === date);
        if (entry) {
          setSavedEntry(entry);
          setSelectedMoods(entry.dailymoods.split(','));
          setDiaryText(entry.dailytext);

          if (entry.sentiment === 'negative') {
            const randomIndex = Math.floor(Math.random() * encouragementMessages.length);
            const randomMessage = encouragementMessages[randomIndex];
            setEncouragement(randomMessage);
          } else {
            setEncouragement('');
          }
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô
          setSavedEntry(null);
          setSelectedMoods([]);
          setDiaryText('');
          setEncouragement('');
        }
      } catch (error) {
        console.error('Error loading saved entry:', error);
      }
    };

    if (view === 'createDiary' || view === 'readDiary') {
      loadSavedEntry();
    }
  }, [view, date]);

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å (‡∏à‡∏≥‡∏Å‡∏±‡∏î 3 ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå)
  const toggleMood = (mood) => {
    if (selectedMoods.includes(mood)) {
      setSelectedMoods(selectedMoods.filter(m => m !== mood));
    } else {
      if (selectedMoods.length >= 3) {
        Alert.alert('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå');
        return;
      }
      setSelectedMoods([...selectedMoods, mood]);
    }
  };

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å
  const analyzeTextSentiment = async (text) => {
    try {
      const response = await fetch('http://test-server-beta-seven.vercel.app/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({ text }).toString(),
      });

      const data = await response.json();
      if (data && data.sentiment) {
        const polarity = data.sentiment.polarity;
        const sentimentResult =
          polarity === 'positive' ? 'positive' :
          polarity === 'negative' ? 'negative' : 'neutral';

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏ñ‡πâ‡∏≤ negative
        if (sentimentResult === 'negative') {
          const randomIndex = Math.floor(Math.random() * encouragementMessages.length);
          const randomMessage = encouragementMessages[randomIndex];
          setEncouragement(randomMessage);
        } else {
          setEncouragement('');
        }

        setSentiment(sentimentResult);
        await saveDiary(sentimentResult);
      } else {
        console.log('Unable to analyze sentiment, missing sentiment data');
      }
    } catch (error) {
      console.error('Error analyzing sentiment:', error);
      Alert.alert('Error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å');
    }
  };

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà‡∏•‡∏á AsyncStorage
  const saveDiary = async (sentiment) => {
    if (selectedMoods.length === 0) {
      Alert.alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å');
      return;
    }

    const emojis = selectedMoods.map(m => moodEmojiMap[m]).join(' ');
    const moodsString = selectedMoods.join(',');

    const [day, month, year] = date.split('-');
    const dateObj = new Date(+year, +month - 1, +day);
    const formatteddate = format(dateObj, 'dd-MM-yyyy');

    const newEntry = {
      id: formatteddate,
      date,
      dailyfeelings: emojis,
      dailymoods: moodsString,
      dailytext: diaryText,
      sentiment,
    };

    try {
      const existing = await AsyncStorage.getItem('diary_entries');
      let entries = existing ? JSON.parse(existing) : [];
      entries = entries.filter((entry) => entry.date !== date);
      entries.push(newEntry);
      await AsyncStorage.setItem('diary_entries', JSON.stringify(entries));

      // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πà‡∏≤‡∏á‡πÜ
      setSelectedMoods([]);
      setDiaryText('');
      setSavedEntry(newEntry);  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï savedEntry ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      setView('readDiary');     // ‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡∏π‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà

      console.log('Diary entry saved:', newEntry);
    } catch (error) {
      console.error('Error saving diary entry:', error);
      Alert.alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
    }
  };

  // ‡∏´‡∏ô‡πâ‡∏≤‡∏î‡∏π‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà
  const ReadDiary = () => {
    return (
      <View style={styles.container}>
        <Text style={styles.title}> ‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô </Text>
        <Text style={styles.date}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {savedEntry?.date}</Text>

        <ScrollView style={styles.scrollContainer}>
          <View style={styles.card}>
            <Text style={styles.cardTitle}>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</Text>
            <Text style={styles.moodText}>{savedEntry?.dailyfeelings}</Text>
          </View>

          <View style={styles.card}>
            <Text style={styles.cardTitle}>‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</Text>
            <Text style={styles.diaryText}>{savedEntry?.dailytext}</Text>
          </View>

          <View style={styles.card}>
            <Text style={styles.cardTitle}>‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</Text>
            <Text style={styles.moodText}>{savedEntry?.sentiment}</Text>
          </View>

          {savedEntry?.sentiment === 'negative' && encouragement !== '' && (
            <View style={styles.card}>
              <Text style={styles.cardTitle}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏≤ ‚ù§Ô∏è</Text>
              <Text style={styles.diaryText}>{encouragement}</Text>
            </View>
          )}
        </ScrollView>

        <TouchableOpacity style={styles.inputButton} onPress={() => setView('createDiary')}>
          <Text style={styles.saveButtonText}>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</Text>
        </TouchableOpacity>
      </View>
    );
  };

  // ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà
  return view === 'createDiary' ? (
    <View style={styles.container}>
      <Text style={styles.title}>‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà</Text>
      <Text style={styles.date}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date}</Text>
      <ScrollView>
        <View style={styles.card}>
          <Text style={styles.cardTitle}>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3)</Text>
          <View style={styles.moodContainer}>
            {Object.entries(moodEmojiMap).map(([key, emoji]) => (
              <TouchableOpacity
                key={key}
                style={[styles.moodButton, selectedMoods.includes(key) && styles.moodButtonSelected]}
                onPress={() => toggleMood(key)}
              >
                <View style={styles.emojiLabelContainer}>
                  <Text style={styles.moodEmoji}>{emoji}</Text>
                  <Text style={styles.moodLabel}>{moodLabelThaiMap[key]}</Text>
                </View>
              </TouchableOpacity>
            ))}
          </View>
        </View>

        <View style={styles.card}>
          <Text style={styles.cardTitle}>‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</Text>
          <TextInput
            style={styles.input}
            placeholder="‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡∏≠‡∏≤‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
            value={diaryText}
            onChangeText={text => setDiaryText(text)}
            multiline
            editable
            autoFocus
            returnKeyType="done"
          />
        </View>

        <TouchableOpacity style={styles.inputButton} onPress={() => analyzeTextSentiment(diaryText)}>
          <Text style={styles.saveButtonText}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</Text>
        </TouchableOpacity>
      </ScrollView>
    </View>
  ) : (
    <ReadDiary />
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#98D2C0',
    padding: 20,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 10,
    marginTop: 32,
  },
  card: {
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 15,
    marginBottom: 15,
    borderWidth: 1,
    borderColor: 'black',
  },
  cardTitle: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  moodContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'center',
    gap: 15,
  },
  moodButton: {
    width: 80,
    height: 80,
    backgroundColor: '#eee',
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
    margin: 5,
  },
  moodButtonSelected: {
    backgroundColor: '#FFD700',
  },
  moodEmoji: {
    fontSize: 36,
  },
  input: {
    height: 150,
    textAlignVertical: 'top',
    marginTop: 10,
    padding: 10,
  },
  inputButton: {
    backgroundColor: '#4F959D',
    borderRadius: 16,
    height: 37,
    borderWidth: 1,
    borderColor: 'black',
    justifyContent: 'center',
    alignItems: 'center',
  },
  saveButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 18,
  },
  diaryText: {
    fontSize: 16,
    marginTop: 10,
  },
  moodText: {
    fontSize: 24,
    marginTop: 10,
    textAlign: 'center',
  },
  emojiLabelContainer: {
    alignItems: 'center',
  },
  moodLabel: {
    fontSize: 14,
  },
  date: {
    textAlign: 'center',
    marginBottom: 10,
    fontSize: 18,
  },
  scrollContainer: {
    flex: 1,
  },
});

export default CreateDiary;
